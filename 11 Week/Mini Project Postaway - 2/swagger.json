{
  "openapi": "3.0.0",
  "info": {
    "title": "Social Media API - By Moin Khan",
    "version": "1.0.0",
    "description": "API documentation for the Social Media Platform."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "Sign up a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  },
                  "gender": {
                    "type": "string",
                    "example": "male"
                  }
                },
                "required": ["name", "email", "password", "gender"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User could not be created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/users/signin": {
      "post": {
        
        "tags": ["Users"],
        "summary": "Sign in an existing user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "jwt_token_here"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or bad request"
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "tags": ["Users"],
        "summary": "Logout the current user",
        "security": [{
          "bearerAuth": []
        }],
        "responses": {
          "200": {
            "description": "User logged out successfully"
          },
          "404": {
            "description": "User could not be logged out"
          }
        }
      }
    },
    "/users/logout-all-devices": {
      "get": {
        "tags": ["Users"],
        "summary": "Logout user from all devices",
        "security": [{
          "bearerAuth": []
        }],
        "responses": {
          "200": {
            "description": "User logged out from all devices successfully"
          },
          "404": {
            "description": "User could not be logged out from all devices"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/update-details/{userId}": {
      "post": {
        "tags": ["Users"],
        "summary": "Update user details",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "John Doe",
                  "email": "johndoe@example.com",
                  "gender": "male"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/get-details/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user details by ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/get-all-details": {
      "get": { 
        "tags": ["Users"],
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments/{postId}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get all comments of a specific post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the post to retrieve comments for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Comments"],
        "summary": "Create a new comment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the post to create a comment on"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "This is a comment."
                  }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/comments/{commentId}": {
      "put": {
        "tags": ["Comments"],
        "summary": "Update an existing comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the comment to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "Updated comment content."
                  }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the comment to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/posts/all": {
      "get": {
        "tags": ["Posts"],
        "summary": "Retrieve all posts (news feed)",
        "responses": {
          "200": {
            "description": "List of all posts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/posts/{postId}": {
      "get": {
        "tags": ["Posts"],
        "summary": "Retrieve a specific post by ID",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the post to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Post retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["Posts"],
        "summary": "Update a specific post by ID",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the post to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "caption": {
                    "type": "string",
                    "example": "Updated caption for the post"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["caption"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Post not found or not authorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Posts"],
        "summary": "Delete a specific post by ID",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the post to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "403": {
            "description": "Not authorized to delete this post"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/posts/user/{userId}": {
      "get": {
        "tags": ["Posts"],
        "summary": "Retrieve all posts for a specific user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to retrieve posts for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's posts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No posts found for this user"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/posts": {
      "post": {
        "tags": ["Posts"],
        "summary": "Create a new post",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "caption": {
                    "type": "string",
                    "example": "This is a new post caption."
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["caption", "imageUrl"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/likes/{id}": {
      "post": {
        "summary": "Toggle like on a post or comment",
        "description": "Toggles the like status for a given post or comment. The `type` parameter in the request body determines whether it's a post or comment.",
        "tags": ["Likes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the post or comment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Specify the type of like (Post or Comment)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["Post", "Comment"],
                    "description": "Specify whether the like is for a post or comment."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Like toggled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Post liked"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid type provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error toggling like.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error toggling like"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get likes for a post or comment",
        "description": "Retrieves the list of users who have liked a specific post or comment.",
        "tags": ["Likes"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the post or comment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Specify the type of like (Post or Comment)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["Post", "Comment"],
                    "description": "Specify whether to retrieve likes for a post or comment."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Likes retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid type provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid type"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No likes found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No likes found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving likes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error retrieving likes"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends/get-friend/{userId}": {
      "get": {
        "summary": "Get a user's friends",
        "description": "Retrieves the list of friends for a specific user.",
        "tags": ["Friends"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "ID of the user whose friends are being retrieved.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Friends retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving friends.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/friends/get-pending-requests": {
      "get": {
        "summary": "Get pending friend requests",
        "description": "Retrieves a list of pending friend requests for the current user.",
        "tags": ["Friends"],
        "responses": {
          "200": {
            "description": "Pending friend requests retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving pending requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/friends/toggle-friendship/{friendId}": {
      "post": {
        "summary": "Toggle friendship",
        "description": "Toggles the friendship status with another user. Adds or removes the friend based on current status.",
        "tags": ["Friends"],
        "parameters": [
          {
            "name": "friendId",
            "in": "path",
            "required": true,
            "description": "ID of the friend to toggle friendship with.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Friendship status toggled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Friendship toggled"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or friend not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error toggling friendship.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/friends/response-to-request/{friendId}": {
      "post": {
        "summary": "Respond to a friend request",
        "description": "Accepts or rejects a pending friend request.",
        "tags": ["Friends"],
        "parameters": [
          {
            "name": "friendId",
            "in": "path",
            "required": true,
            "description": "ID of the friend who sent the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Response to the friend request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RespondToRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Friend request response recorded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Friend request response recorded"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid response provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or friend not found, or request not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error responding to friend request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/otp/send": {
      "post": {
        "summary": "Send OTP",
        "description": "Sends an OTP to the specified email address.",
        "tags": ["OTP"],
        "requestBody": {
          "description": "Email address to send the OTP to.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendOTPRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email is required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to send OTP.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/otp/verify": {
      "post": {
        "summary": "Verify OTP",
        "description": "Verifies the provided OTP for the specified email address.",
        "tags": ["OTP"],
        "requestBody": {
          "description": "Email address and OTP to verify.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email and OTP are required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired OTP.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to verify OTP.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/otp/reset-password": {
      "post": {
        "summary": "Reset Password",
        "description": "Resets the user's password using the provided email, OTP, and new password.",
        "tags": ["OTP"],
        "requestBody": {
          "description": "Email address, OTP, and new password for resetting the password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email, OTP, and new password are required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired OTP.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to reset password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "66b609391ca602f2e7ea0682"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "johndoe@example.com"
          },
          "gender": {
            "type": "string",
            "example": "male"
          },
          "tokens": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmI2MDkzOTFjYTYwMmYyZTdlYTA2ODIiLCJpYXQiOjE3MjMyMTQ4MDF9._BTPB-kF28OOCdfljTMgp13shrfhr5P5NJvIXCv2XrM"
            }
          },
          "friends": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "64d609391ca602f2e7ea0683"
          },
          "postId": {
            "type": "string",
            "example": "64d609391ca602f2e7ea0682"
          },
          "userId": {
            "type": "string",
            "example": "64d609391ca602f2e7ea0681"
          },
          "content": {
            "type": "string",
            "example": "This is a comment."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T15:53:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T16:00:00Z"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "64d609391ca602f2e7ea0683"
          },
          "caption": {
            "type": "string",
            "example": "This is a post caption."
          },
          "imageUrl": {
            "type": "string",
            "example": "image.jpg"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "64d609391ca602f2e7ea0681"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "example": "john@example.com"
              }
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "likes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Like"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T15:53:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T16:00:00Z"
          }
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "ID of the user who liked the post or comment.",
            "example": "60c72b2f9b1d4e001f2c3d4e"
          },
          "likeable": {
            "type": "string",
            "description": "ID of the post or comment that is liked.",
            "example": "60c72b2f9b1d4e001f2c3d4f"
          },
          "types": {
            "type": "string",
            "enum": ["Comment", "Post"],
            "description": "Type of the likeable entity.",
            "example": "Post"
          },
          "isLike": {
            "type": "boolean",
            "description": "Indicates whether it's a like or unlike action.",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the like was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the like was last updated."
          }
        }
      },    
      "schemas": {
      "Friend": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the friend.",
            "example": "60c72b2f9b1d4e001f2c3d4e"
          },
          "name": {
            "type": "string",
            "description": "Name of the friend.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the friend.",
            "example": "john.doe@example.com"
          },
          "status": {
            "type": "string",
            "description": "Status of the friendship.",
            "example": "accepted"
          }
        }
      },
      "FriendRequest": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "ID of the user who sent the friend request.",
            "example": "60c72b2f9b1d4e001f2c3d4e"
          },
          "name": {
            "type": "string",
            "description": "Name of the user who sent the friend request.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the user who sent the friend request.",
            "example": "john.doe@example.com"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "accepted", "rejected"],
            "description": "Status of the friend request.",
            "example": "pending"
          }
        }
      }
      },  
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message.",
            "example": "Error retrieving friends"
          }
        }
      },
      "ToggleFriendshipRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "ID of the user initiating the toggle action.",
            "example": "60c72b2f9b1d4e001f2c3d4e"
          },
          "friendId": {
            "type": "string",
            "description": "ID of the friend to toggle friendship with.",
            "example": "60c72b2f9b1d4e001f2c3d4f"
          }
        },
        "required": ["friendId"]
      },
      "RespondToRequestRequest": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "enum": ["accepted", "rejected"],
            "description": "Response to the friend request.",
            "example": "accepted"
          }
        },
        "required": ["response"]
      },
      "FriendsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Friend"
        }
      },
      "PendingRequestsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FriendRequest"
        }
      },
      "SendOTPRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to send the OTP.",
            "example": "user@example.com"
          }
        },
        "required": ["email"]
      },
      "VerifyOTPRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address associated with the OTP.",
            "example": "user@example.com"
          },
          "otp": {
            "type": "string",
            "description": "OTP code to be verified.",
            "example": "123456"
          }
        },
        "required": ["email", "otp"]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address associated with the OTP.",
            "example": "user@example.com"
          },
          "otp": {
            "type": "string",
            "description": "OTP code to be verified.",
            "example": "123456"
          },
          "newPassword": {
            "type": "string",
            "description": "New password to be set.",
            "example": "newSecurePassword123"
          }
        },
        "required": ["email", "otp", "newPassword"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
